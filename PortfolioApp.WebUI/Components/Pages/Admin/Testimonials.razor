@page "/admin/testimonials"
@using PortfolioApp.MinimalCore.FileStorage
@layout AdminLayout
@rendermode InteractiveServer
@inject IGenericRepository<Testimonial> TestimonialRepository
@inject IGenericRepository<Image> ImageRepository
@inject IFileStorageService FileUploadService
<h3 class="mb-3" style="color:var(--heading-color);">Testimonials</h3>

<!-- Create button -->
<button class="btn mb-3" style="background:var(--accent-color);color:var(--contrast-color);" @onclick="ShowCreateModal">
	+ New Testimonial
</button>

<!-- Table -->
<table class="table table-striped table-bordered">
	<thead class="table-light">
		<tr>
            <th>Image</th>
			<th>Name</th>
			<th>Stars</th>
			<th>Review</th>
			<th style="width:150px;">Actions</th>
		</tr>
	</thead>
	<tbody>
		@if (TestimonialsList.Count == 0)
		{
			<tr>
				<td colspan="5" class="text-center text-muted">No testimonials found</td>
			</tr>
		}
		else
		{
			@foreach (var t in TestimonialsList)
			{
				<tr>
                    <td>
                        @if (t.Image != null)
                        {
                            <img src="@t.Image.Path" alt="testimonial" width="50" height="50" />
                        }
                    </td>
					<td>@t.FullName</td>
					<td>@t.Stars</td>
					<td>@t.Review</td>
					<td>
						<button class="btn btn-sm me-1" style="background:var(--accent-color);color:var(--contrast-color);" @onclick="() => ShowUpdateModal(t)">
							Edit
						</button>
						<button class="btn btn-sm" style="background:#dc3545;color:var(--contrast-color);" @onclick="() => DeleteTestimonial(t.Id)">
							Delete
						</button>
					</td>
				</tr>
			}
		}
	</tbody>
</table>

<!-- Modal -->
@if (IsModalOpen)
{
	<div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
		<div class="modal-dialog">
			<div class="modal-content" style="background:var(--surface-color);color:var(--default-color);">
				<div class="modal-header">
					<h5 class="modal-title">@ModalTitle</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="@EditingTestimonial" OnValidSubmit="SaveTestimonial" M>
						<DataAnnotationsValidator />
						<ValidationSummary />
						<div class="mb-2">
							<img src="@EditingImagePath" class="img-fluid" style="max-height:150px; object-fit:contain;" />
						</div>
						@if (EditingTestimonial.Id != 0)
						{
							<div class="mb-2">
								<label>Id</label>
								<input class="form-control" value="@EditingTestimonial.Id" readonly />
							</div>
						}
						<div class="mb-2">
							<label>Full Name</label>
							<InputText class="form-control" @bind-Value="EditingTestimonial.FullName" />
						</div>
						<div class="mb-2">
							<label>Stars</label>
							<InputNumber class="form-control" @bind-Value="EditingTestimonial.Stars" />
						</div>
						<div class="mb-2">
							<label>Review</label>
							<InputTextArea class="form-control" @bind-Value="EditingTestimonial.Review" />
						</div>
						<div class="mb-2">
							<label>Image Path</label>
							<InputFile OnChange="OnFileChange" multiple />
						</div>
					</EditForm>
				</div>
				<div class="modal-footer">
					<button class="btn" style="background:var(--accent-color);color:var(--contrast-color);" @onclick="SaveTestimonial">
						Save
					</button>
					<button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
				</div>
			</div>
		</div>
	</div>
}


@code {
    private List<Testimonial> TestimonialsList = new();
    private Testimonial EditingTestimonial = new();
    private IBrowserFile? uploadedFile;
    private string EditingImagePath = string.Empty;
    private bool IsModalOpen = false;
    private string ModalTitle = "Create Testimonial";

    protected override async Task OnInitializedAsync()
    {
        TestimonialsList = await TestimonialRepository.GetListAsync(
            predicate: t => t.ProfileId == 1,
            orderBy: null,
            includes: t => t.Image
        );
    }

    private void OnFileChange(InputFileChangeEventArgs e) => uploadedFile = e.File;

    void ShowCreateModal()
    {
        EditingTestimonial = new Testimonial { ProfileId = 1, Stars = 5 };
        EditingImagePath = string.Empty;
        ModalTitle = "Create Testimonial";
        IsModalOpen = true;
    }

    void ShowUpdateModal(Testimonial t)
    {
        EditingTestimonial = new Testimonial
        {
            Id = t.Id,
            FullName = t.FullName,
            Stars = t.Stars,
            Review = t.Review,
            ImageId = t.ImageId,
            ProfileId = t.ProfileId
        };

        EditingImagePath = t.Image?.Path ?? string.Empty;
        ModalTitle = "Update Testimonial";
        IsModalOpen = true;
    }

    void CloseModal() => IsModalOpen = false;

    private async Task<Image?> HandleImageUploadAsync()
    {
        if (uploadedFile != null)
        {
            using var stream = uploadedFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);

            var result = await FileUploadService.UploadAsync(
                stream,
                "images/testimonials",
                uploadedFile.Name
            );

            EditingImagePath = "/" + result.Path;

            var imageEntity = new Image
            {
                Path = EditingImagePath,
                Name = result.FileName
            };

            await ImageRepository.AddAsync(imageEntity);
            await ImageRepository.SaveChangesAsync();
            return imageEntity;
        }
        else if (EditingTestimonial.ImageId != 0)
        {
            var existingImage = TestimonialsList
                .FirstOrDefault(t => t.ImageId == EditingTestimonial.ImageId)?.Image;

            if (existingImage != null)
            {
                existingImage.Path = EditingImagePath;
                await ImageRepository.SaveChangesAsync();
                return existingImage;
            }
        }

        return null;
    }

    private async Task UpdateTestimonialAsync(Image? imageEntity)
    {
        if (imageEntity != null)
        {
            EditingTestimonial.ImageId = imageEntity.Id;
            EditingTestimonial.Image = imageEntity;
        }

        if (EditingTestimonial.Id == 0)
        {
            await TestimonialRepository.AddAsync(EditingTestimonial);
            TestimonialsList.Add(EditingTestimonial);
        }
        else
        {
            var existing = await TestimonialRepository.GetByIdAsync(EditingTestimonial.Id);
            if (existing != null)
            {
                existing.FullName = EditingTestimonial.FullName;
                existing.Stars = EditingTestimonial.Stars;
                existing.Review = EditingTestimonial.Review;
                existing.ImageId = EditingTestimonial.ImageId;
                existing.Image = EditingTestimonial.Image;

                await TestimonialRepository.SaveChangesAsync();

                var index = TestimonialsList.FindIndex(x => x.Id == EditingTestimonial.Id);
                if (index >= 0)
                    TestimonialsList[index] = existing;
            }
        }
    }

    async Task SaveTestimonial()
    {
        var imageEntity = await HandleImageUploadAsync();
        await UpdateTestimonialAsync(imageEntity);
        CloseModal();
    }

    async Task DeleteTestimonial(int id)
    {
        var testimonial = await TestimonialRepository.FirstOrDefaultAsync(x => x.Id == id);
        if (testimonial == null) return;

        await TestimonialRepository.DeleteAsync(testimonial);
        TestimonialsList.RemoveAll(x => x.Id == id);
    }
}